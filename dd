<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Raleway:wght@400;700&display=swap');

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Raleway', sans-serif;
    }

    body {
      display: flex;
      height: 100vh;
      background-color: #f4f7fb;
    }

    .sidebar {
      width: 250px;
      background-color: #34495e;
      color: #fff;
      padding: 20px;
      text-align: center;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .sidebar h2 {
      margin-bottom: 20px;
      font-size: 1.5em;
    }

    .sidebar button {
      width: 90%;
      margin: 10px 0;
      padding: 10px;
      background-color: #3498db;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 1em;
    }

    .sidebar button.logout-btn {
      background-color: #e74c3c;
    }

    .sidebar button:hover {
      background-color: #2980b9;
    }

    .sidebar button.logout-btn:hover {
      background-color: #c0392b;
    }

    .main-content {
      flex-grow: 1;
      padding: 20px;
    }

    .main-content h1 {
      margin-bottom: 20px;
      font-size: 1.8em;
      color: #2c3e50;
    }

    .page-card {
      background-color: #fff;
      padding: 15px;
      margin: 10px 0;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .page-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    }

    .page-card button {
      margin-left: 10px;
      padding: 8px 12px;
      cursor: pointer;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 0.9em;
      transition: background-color 0.3s;
    }

    .page-card button.edit {
      background-color: #f39c12;
    }

    .page-card button.text {
      background-color: #8e44ad;
    }

    .page-card button.delete {
      background-color: #e74c3c;
    }

    .page-card button:hover {
      background-color: #2980b9;
    }

    .page-card button.edit:hover {
      background-color: #d35400;
    }

    .page-card button.text:hover {
      background-color: #732d91;
    }

    .page-card button.delete:hover {
      background-color: #c0392b;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      background: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
    }

    .modal-content {
      background: white;
      padding: 20px;
      border-radius: 5px;
      max-width: 500px;
      width: 90%;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    textarea,
    input {
      width: 100%;
      padding: 10px;
      margin: 10px 0;
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 1em;
    }

    .modal button {
      padding: 8px 12px;
      margin: 5px;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .save-btn {
      background-color: #2ecc71;
      color: white;
    }

    .close-btn {
      background-color: #e74c3c;
      color: white;
    }

    .save-btn:hover {
      background-color: #27ae60;
    }

    .close-btn:hover {
      background-color: #c0392b;
    }
  </style>
</head>

<body>
  <div class="sidebar">
    <h2>Dashboard</h2>
    <button class="logout-btn" id="logout-btn">Logout</button>
    <button class="add-page-btn" id="add-page-btn">+ Add New Page</button>
  </div>

  <div class="main-content">
    <h1>Manage Pages</h1>
    <div id="page-list"></div>
  </div>

  <div class="modal" id="editTextModal">
    <div class="modal-content">
      <h3>Edit Page Content</h3>
      <textarea id="text-content" placeholder="Type your content here..."></textarea>
      <div style="text-align: right;">
        <button class="save-btn" id="save-text-btn">Save Changes</button>
        <button class="close-btn" id="close-modal-btn">Close</button>
      </div>
    </div>
  </div>

  <div class="modal" id="editTitleModal">
    <div class="modal-content">
      <h3>Edit Page Title</h3>
      <input type="text" id="title-input" placeholder="Enter new title" />
      <div style="text-align: right;">
        <button class="save-btn" id="save-title-btn">Save Title</button>
        <button class="close-btn" id="close-title-modal-btn">Close</button>
      </div>
    </div>
  </div>

  <script>
    const apiUrl = window.location.origin; // Replace with your API URL
    let currentPageId = null;

    // Function to fetch pages and render them
    async function fetchPages() {
      const token = localStorage.getItem('token');
      try {
        const response = await fetch(`${apiUrl}/get-pages`, {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        });
        const pages = await response.json();
        renderPageList(pages);
      } catch (error) {
        console.error('Error fetching pages:', error);
      }
    }

    // Function to render page list with edit and delete buttons
    function renderPageList(pages) {
      const pageListDiv = document.getElementById('page-list');
      pageListDiv.innerHTML = '';
      pages.forEach(page => {
        const pageDiv = document.createElement('div');
        pageDiv.className = 'page-card';
        pageDiv.innerHTML = `
          <div>${page.title}</div>
          <div>
            <button class="edit" onclick="openEditTitleModal('${page._id}', '${page.title}')">Edit Title</button>
            <button class="text" onclick="openEditTextModal('${page._id}', '${page.content}')">Edit Content</button>
            <button class="delete" onclick="deletePage('${page._id}')">Delete</button>
          </div>
        `;
        pageListDiv.appendChild(pageDiv);
      });
    }

    // Function to delete page
    async function deletePage(pageId) {
      const token = localStorage.getItem('token');
      try {
        await fetch(`${apiUrl}/delete-page/${pageId}`, {
          method: 'DELETE',
          headers: { 'Authorization': `Bearer ${token}` },
        });
        await fetchPages(); // Refresh the page list after deletion
      } catch (error) {
        console.error('Error deleting page:', error);
      }
    }

    // Function to open the "Edit Title" modal
    async function openEditTitleModal(pageId, currentTitle) {
      currentPageId = pageId;
      const titleInput = document.getElementById('title-input');
      titleInput.value = currentTitle;
      document.getElementById('editTitleModal').style.display = 'flex';
    }

    // Function to open the "Edit Content" modal
    async function openEditTextModal(pageId, currentContent) {
      currentPageId = pageId;
      const textContent = document.getElementById('text-content');
      textContent.value = currentContent;
      document.getElementById('editTextModal').style.display = 'flex';
    }

    // Function to update the page with new title and content
    async function updatePage(pageId, update) {
      const token = localStorage.getItem('token');
      const { title, content } = update;

      // Ensure that both title and content are not empty
      if (!title || !content) {
        alert('Both title and content are required');
        return;
      }

      try {
        const response = await fetch(`${apiUrl}/update-page/${pageId}`, {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ title, content }),
        });

        if (!response.ok) {
          const error = await response.json();
          alert(`Error: ${error.message}`);
          return;
        }

        fetchPages(); // Refresh the page list after update

      } catch (error) {
        console.error('Error updating page:', error);
      }
    }

    // Event listener for saving the updated title
    document.getElementById('save-title-btn').addEventListener('click', async () => {
      const title = document.getElementById('title-input').value;
      const content = document.getElementById('text-content').value; // Use the current content
      await updatePage(currentPageId, { title, content });
      document.getElementById('editTitleModal').style.display = 'none';
    });

    // Event listener for saving the updated content
    document.getElementById('save-text-btn').addEventListener('click', async () => {
      const content = document.getElementById('text-content').value;
      const title = document.getElementById('title-input').value; // Use the current title
      await updatePage(currentPageId, { title, content });
      document.getElementById('editTextModal').style.display = 'none';
    });

    // Close modals when user clicks "Close"
    document.getElementById('close-modal-btn').addEventListener('click', () => {
      document.getElementById('editTextModal').style.display = 'none';
    });

    document.getElementById('close-title-modal-btn').addEventListener('click', () => {
      document.getElementById('editTitleModal').style.display = 'none';
    });

    // Event listener for logging out
    document.getElementById('logout-btn').addEventListener('click', () => {
      localStorage.removeItem('token');
      window.location.href = '/index.html';
    });

    // Event listener for adding a new page
    document.getElementById('add-page-btn').addEventListener('click', async () => {
      const title = prompt('Enter the title of the new page:');
      if (title) {
        await addPage(title);
        await fetchPages();
      }
    });

    // Function to add a new page
    async function addPage(title) {
      const token = localStorage.getItem('token');
      const content = "This is your new page content.";  // Default content

      try {
        const response = await fetch(`${apiUrl}/add-page`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ title, content }),
        });

        if (!response.ok) {
          const error = await response.json();
          alert(`Error: ${error.message}`);
          return;
        }


        fetchPages(); // Refresh the page list after adding the new page
      } catch (error) {
        console.error('Error adding page:', error);
        alert('Error adding page.');
      }
    }

    // Fetch the pages when the page is loaded
    document.addEventListener('DOMContentLoaded', fetchPages);
  </script>
</body>

</html>
